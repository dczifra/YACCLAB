// Copyright (c) 2020, the YACCLAB contributors, as 
// shown by the AUTHORS file. All rights reserved.
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#pragma once
#include "opencv2/opencv.hpp"
#include <chrono>

class PerformanceEvaluator {
	struct elapsed {
        std::chrono::system_clock::time_point _start;
        double _last;
        double _total;

        elapsed() : _last(0), _total(0) {}
	};

public:
	PerformanceEvaluator() {
		//_tickFrequency = cv::getTickFrequency();
	}
	void start() {
        _counter._start = std::chrono::high_resolution_clock::now();
	}
	double stop() {
        std::chrono::duration<double, std::milli> fp_ms = std::chrono::high_resolution_clock::now() - _counter._start;
        double t = fp_ms.count();
		_counter._last = t;
		_counter._total += t;
        return _counter._last;
	}
	void reset() {
		_counter._total = 0;
	}
	double last() {
        return _counter._last;
	}
	double total() {
		return _counter._total;
	}

	void start (const std::string& s) {
        _counters[s]._start = std::chrono::high_resolution_clock::now();
	}
	double stop (const std::string& s) {
		elapsed& e = _counters[s];
        std::chrono::duration<double, std::milli> fp_ms = std::chrono::high_resolution_clock::now() - e._start;
        double t = fp_ms.count();
		e._last = t;
		e._total += t;
		return e._last;
	}
	void reset (const std::string& s) {
		_counters[s]._total = 0;
	}
	double last (const std::string& s) {
		return _counters[s]._last;
	}
	double total (const std::string& s) {
		return _counters[s]._total;
	}

private:
	double _tickFrequency;
	elapsed _counter;
	std::map<std::string,elapsed> _counters;
};